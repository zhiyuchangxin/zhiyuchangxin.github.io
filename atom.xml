<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>One Piece</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-27T09:35:56.472Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>织语长心</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>谁还没遇上“层叠上下文”呢</title>
    <link href="http://yoursite.com/2018/09/10/StackingContext/"/>
    <id>http://yoursite.com/2018/09/10/StackingContext/</id>
    <published>2018-09-10T07:00:00.000Z</published>
    <updated>2018-12-27T09:35:56.472Z</updated>
    
    <content type="html"><![CDATA[<p>一晃时间走了好远，又一年教师节了，在此祝所有老师教师节快乐！<br>言归正传，为何提笔写此文呢？前两天在项目中给某个节点A设置 fixed 定位后出现了一个神奇的现象：无论我怎么设置其子节点B的层级，B总是会被A之后出现的任意带有层级的元素节点遮挡。<br>我仿佛发现了新大陆一般惊奇，平日里对待熟悉的事物我总能做到恰到好处的蜻蜓点水，终于掉坑里了吧(囧)。于是乎，我决定今天要彻底弄懂层叠上下文（Stacking Context）。</p><a id="more"></a><p>还是先来看一下我遇到的问题吧~<br>分别用<strong><code>chrome/firefox</code></strong>和<strong><code>IE</code></strong>打开<a href="https://codepen.io/zhiyuchangxin/pen/LXNLRb" target="_blank"><code>DEMO1</code></a></p><p><img src="http://cdn.zhiyuchangxin.cn/stack-noie.png?imageMogr2/thumbnail/400x/blur/1x0/quality/75|watermark/2/text/QOe7h-ivremVv-W_gw==/font/5a6L5L2T/fontsize/240/fill/I0UxRTFFMQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt="非IE浏览器" title="非IE浏览器"></p><p><img src="http://cdn.zhiyuchangxin.cn/stack-ie.png?imageMogr2/thumbnail/400x/blur/1x0/quality/75|watermark/2/text/QOe7h-ivremVv-W_gw==/font/5a6L5L2T/fontsize/240/fill/I0UxRTFFMQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt="IE浏览器" title="IE浏览器"></p><p>哇~为什么IE上的表现和我们的预期一致，而 chrome/firefox 上却出现了异常呢？<br>如果你也跟我一样好奇，那咱们就快点开始这次旅行吧~</p><blockquote><p>文中所有 IE 浏览器除特殊标明包含 IE7 外 均指 IE7 以上</p></blockquote><h3 id="一、层叠界的术语"><a href="#一、层叠界的术语" class="headerlink" title="一、层叠界的术语"></a>一、层叠界的术语</h3><ol><li><strong>Z轴</strong>：眼睛垂直于屏幕的一条虚拟的轴线</li><li><strong>层叠上下文(Stacking Context)</strong>：表示元素在z轴上的层叠水平（<code>html</code>的三维概念）</li><li><strong>层叠顺序(Stacking Order)</strong>：表示同一层叠上下文中的元素在z轴上的显示顺序</li></ol><blockquote><p>重要的事说三遍：<br>所有层叠水平的比较都是以<strong>同一层叠上下文</strong>为基础的哟~<br><strong>同一层叠上下文</strong>为基础的哟~<br><strong>同一层叠上下文</strong>~</p></blockquote><h3 id="二、层叠准则（前提：同一层叠上下文中做比较）"><a href="#二、层叠准则（前提：同一层叠上下文中做比较）" class="headerlink" title="二、层叠准则（前提：同一层叠上下文中做比较）"></a>二、层叠准则（前提：同一层叠上下文中做比较）</h3><ol><li><strong>谁大谁上</strong>：非同一层叠水平时，水平高的在上面</li><li><strong>后来居上</strong>：同一层叠水平时，后出现的在上面</li></ol><h3 id="三、层叠上下文的特性"><a href="#三、层叠上下文的特性" class="headerlink" title="三、层叠上下文的特性"></a>三、层叠上下文的特性</h3><ol><li><strong>层叠上下文</strong>的层叠水平要比<strong>普通元素</strong>高</li><li>层叠上下文可以<strong><em>嵌套</em></strong>：内部层叠上下文及其所有子元素均受制于外部的层叠上下文</li><li>每个层叠上下文和兄弟元素<strong><em>独立</em></strong>：当进行层叠变化或渲染的时候，只需考虑后代元素</li><li>每个层叠上下文<strong><em>自成体系</em></strong>：当元素发生层叠的时候，整个元素被认为在<strong><em>父层叠上下文的层叠顺序中</em></strong></li><li>层叠上下文可以<strong><em>阻断</em></strong>元素的混合模式</li></ol><h3 id="四、层叠上下文的创建"><a href="#四、层叠上下文的创建" class="headerlink" title="四、层叠上下文的创建"></a>四、层叠上下文的创建</h3><ol><li><strong>天生派(根元素)</strong>：页面的根元素<code>&lt;html&gt;</code>天生具有层叠上下文</li><li><strong>正统派(传统)</strong>：<code>z-index</code>为<strong>数值</strong>的<strong>定位/布局元素</strong><ul><li>IE7 定位/布局元素直接生成层叠上下文，因为IE7的<code>z-index</code>默认值就是<code>0</code></li></ul></li><li><strong>扩招派(新秀)</strong>：<strong>CSS3</strong> 属性产生的层叠上下文</li></ol><h4 id="正统派层叠上下文创建"><a href="#正统派层叠上下文创建" class="headerlink" title="正统派层叠上下文创建"></a>正统派层叠上下文创建</h4><ol><li><strong><em><code>position: relative/absolute</code></em></strong>定位：<ul><li><code>z-index: !auto</code> 创建</li></ul></li><li><strong><em><code>position: fixed</code></em></strong>定位：<ul><li>「IE 内核的浏览器」<code>z-index: !auto</code> 创建</li><li>非「IE 内核的浏览器」直接创建（这就是 DEMO1 中异常现象产生的根源）</li></ul></li><li><strong><em><code>position: sticky</code></em></strong>定位时 ？？？<ul><li>sticky定位根据当前定位状态综合1，2两种情况</li></ul></li></ol><h4 id="扩招派层叠上下文创建"><a href="#扩招派层叠上下文创建" class="headerlink" title="扩招派层叠上下文创建"></a>扩招派层叠上下文创建</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">display:flex|inline-flex 弹性布局的元素：其”子元素“z-index != auto 创建</span><br><span class="line">元素的 opacity: !1</span><br><span class="line">元素的 transform: !none</span><br><span class="line">元素的 perspective != none // 透视效果</span><br><span class="line">元素的 filter: !none</span><br><span class="line">元素的 mix-blend-mode: !normal // 元素和白色背景混合，IE 不支持</span><br><span class="line">元素的 isolation: isolate // 阻隔混合模式</span><br><span class="line">元素的 will-change 属性值为 transform... // 增强页面渲染性能</span><br><span class="line">元素的 -webkit-overflow-scrolling: touch</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>层叠的表现可以看<a href="https://codepen.io/zhiyuchangxin/pen/YRqxXO" target="_blank"><code>DEMO2</code></a></p><h3 id="五、层叠顺序（Stacking-Order）"><a href="#五、层叠顺序（Stacking-Order）" class="headerlink" title="五、层叠顺序（Stacking Order）"></a>五、层叠顺序（Stacking Order）</h3><p>顾名思义，层叠顺序即元素在 Z 轴上的显示顺序。<br>参照了张鑫旭对层叠顺序的图解，加之自己理解后，重新绘制了<strong><code>同一层叠上下文</code></strong>前提下的<strong><code>9级层叠顺序图</code></strong>，如下：<br><a href="https://codepen.io/zhiyuchangxin/pen/RqarRv" target="_blank"><code>DEMO3</code></a></p><p><img src="http://cdn.zhiyuchangxin.cn/stacking-order1.png?imageMogr2/thumbnail/650x/blur/1x0/quality/75|watermark/2/text/QOe7h-ivremVv-W_gw==/font/5a6L5L2T/fontsize/240/fill/I0UxRTFFMQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt="层叠顺序" title="层叠顺序示意图"></p><blockquote><p>DEMO3 是我对9级层叠顺序图进行的校验，如过大家发现存在什么问题可以随时联系我~</p></blockquote><h4 id="思考两个问题"><a href="#思考两个问题" class="headerlink" title="思考两个问题"></a>思考两个问题</h4><ol><li>为什么内联元素（第6级）的层叠顺序比浮动元素（第5级）和块状元素（第4级）高？<ul><li>因为最初的最初我们所做的所有工作都是为展示图文信息做准备的，后来的诸多变化也未曾脱离这个源头</li></ul></li><li>为什么定位元素会在普通元素之上展示？<ul><li>从图中可见定位元素跑到了第7级水平，高于普通元素</li></ul></li></ol><h4 id="看图划重点啦："><a href="#看图划重点啦：" class="headerlink" title="看图划重点啦："></a>看图划重点啦：</h4><ol><li>当父级元素未生成自己的层叠上下文时，只需给<code>z-index</code>设置为负值即可实现元素的隐藏；</li><li>单纯从<strong>层叠水平</strong>来看，<code>z-index</code>的血统比其他方式生成层叠上下文的血统更纯正些；<ul><li>因为<code>z-index</code>除了设置为<code>auto/0</code>（与其他层叠上下文同级）外，还可以显性的设置大于 0 的值</li></ul></li><li>当<code>transform: translateZ(&gt;0)</code>出现后，<code>z-index</code>再想超越其层级就有些难度啦；<ul><li>由上图可见<code>transform: translateZ(&gt;0)</code>在最高级了</li></ul></li><li>虽有难度，但依然可以超越。只需给<code>非body</code>祖先元素添加<code>overflow:hidden</code>样式<code>z-index</code>就能重拾老大的称号~<ul><li>这是因为当给<code>非body</code>祖先元素添加了<code>overflow:hidden</code>后，<code>transform</code>便失去了其独特的魔法，此时的它乖乖地回到了第7级水平。</li></ul></li></ol><p><a href="https://codepen.io/zhiyuchangxin/pen/RqarRv" target="_blank"><code>DEMO3</code></a>给<code>.bg-box 添加 overflow: hidden;</code>可以验证一下第四点</p><h3 id="六、改变层叠顺序"><a href="#六、改变层叠顺序" class="headerlink" title="六、改变层叠顺序"></a>六、改变层叠顺序</h3><h4 id="不产生层叠上下文的前提下："><a href="#不产生层叠上下文的前提下：" class="headerlink" title="不产生层叠上下文的前提下："></a>不产生层叠上下文的前提下：</h4><h5 id="1-调整DOM结构"><a href="#1-调整DOM结构" class="headerlink" title="(1) 调整DOM结构"></a>(1) 调整<code>DOM</code>结构</h5><ul><li>后来居上准则</li></ul><h5 id="2-添加非z-index相关的属性"><a href="#2-添加非z-index相关的属性" class="headerlink" title="(2) 添加非z-index相关的属性"></a>(2) 添加<code>非z-index</code>相关的属性</h5><ul><li>block、float、inline、inline-block、定位…</li></ul><h4 id="产生层叠上下文的前提下："><a href="#产生层叠上下文的前提下：" class="headerlink" title="产生层叠上下文的前提下："></a>产生层叠上下文的前提下：</h4><h5 id="1-z-index问鼎天下"><a href="#1-z-index问鼎天下" class="headerlink" title="(1) z-index问鼎天下"></a>(1) <code>z-index</code>问鼎天下</h5><ul><li><code>z-index</code>设置层级须在定位元素<code>position:!static</code>或父元素弹性布局<code>display:flex</code>时生效，其值越大层叠水平越高；</li><li><strong>非IE7</strong>的定位元素默认添加<code>z-index:auto</code>属性；<a href="https://codepen.io/zhiyuchangxin/pen/MqrNJJ" target="_blank"><code>DEMO4</code></a></li></ul><p><img src="http://cdn.zhiyuchangxin.cn/fixed-before.gif?imageMogr2/thumbnail/300x/blur/1x0/quality/75|watermark/2/text/QOe7h-ivremVv-W_gw==/font/5a6L5L2T/fontsize/240/fill/I0UxRTFFMQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt="设置fixed" title="fixed 的兄弟元素未设置定位(position=static)"></p><p><img src="http://cdn.zhiyuchangxin.cn/fixed-after.gif?imageMogr2/thumbnail/300x/blur/1x0/quality/75|watermark/2/text/QOe7h-ivremVv-W_gw==/font/5a6L5L2T/fontsize/240/fill/I0UxRTFFMQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt="设置fixed" title="fixed 的兄弟元素设置定位(eg: position=relative)"></p><blockquote><p>现象：我们给 fixed 的相邻兄弟元素添加了 position: relative 后再滚动页面，发现 fixed 元素被遮住了！！！<br>原因：同时设置定位后，元素均处于层叠顺序的第7级，处于同一层叠水平上，加之“后来居上”准则得此结果。</p></blockquote><ul><li><strong>IE7</strong>的定位元素默认添加<code>z-index:0</code>属性，直接创建层叠上下文；</li><li><code>z-index:auto</code>与<code>z-index:0</code>在层叠顺序上均属于第7级，但在层叠上下文的产生上差异很大；</li><li><code>position:fixed</code>在<strong>非IE</strong>浏览器中会直接生成层叠上下文，无需显性设置<code>z-index</code>为数值；</li></ul><h5 id="2-translateZ逐鹿中原"><a href="#2-translateZ逐鹿中原" class="headerlink" title="(2) translateZ逐鹿中原"></a>(2) <code>translateZ</code>逐鹿中原</h5><ul><li><code>transform</code> 可生成新的层叠上下文<br><img src="http://cdn.zhiyuchangxin.cn/transforem-after.gif?imageMogr2/thumbnail/300x/blur/1x0/quality/75|watermark/2/text/QOe7h-ivremVv-W_gw==/font/5a6L5L2T/fontsize/240/fill/I0UxRTFFMQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt="translateY 生成了新的层叠上下文" title="translateY 生成了新的层叠上下文"><blockquote><p>现象：下拉刷新的logo设置translateY偏移量后，结束刷新时logo没有被遮住；<br>原因：<code>transform</code> 可生成新的层叠上下文。</p></blockquote></li><li>通过设置 translateZ 的值来改变元素的层叠水平，其值越大，层级越高</li><li>translateZ 改变层级需要满足下列条件<strong>之一</strong>：<ul><li>父元素中设置 transform-style: preserve-3d</li><li>当前元素设置 perspective 透视<br><img src="http://cdn.zhiyuchangxin.cn/transform-before.gif?imageMogr2/thumbnail/300x/blur/1x0/quality/75|watermark/2/text/QOe7h-ivremVv-W_gw==/font/5a6L5L2T/fontsize/240/fill/I0UxRTFFMQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt="translateZ 处理后" title="translateZ 处理后"></li></ul></li></ul><h5 id="3-z-index与translateZ双剑合璧？？？"><a href="#3-z-index与translateZ双剑合璧？？？" class="headerlink" title="(3) z-index与translateZ双剑合璧？？？"></a>(3) <code>z-index</code>与<code>translateZ</code>双剑合璧？？？</h5><p>当我们同时设置<code>transform</code>与<code>z-index</code>时，常会出现<code>z-index</code>失效的情况<br><img src="http://cdn.zhiyuchangxin.cn/transform-zindex0.png?imageMogr2/thumbnail/400x/blur/1x0/quality/75|watermark/2/text/QOe7h-ivremVv-W_gw==/font/5a6L5L2T/fontsize/240/fill/I0UxRTFFMQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt="层叠冲突" title="transform与z-index冲突"></p><p>我们该如何解决上述冲突呢？</p><ul><li>任意<code>非body</code>祖先元素设置<code>overflow:hidden</code>即可恢复和其他浏览器一样的渲染</li></ul><p><img src="http://cdn.zhiyuchangxin.cn/transform-zindex.gif?imageMogr2/thumbnail/600x/blur/1x0/quality/75|watermark/2/text/QOe7h-ivremVv-W_gw==/font/5a6L5L2T/fontsize/240/fill/I0UxRTFFMQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt="解决层叠冲突" title="解决层叠冲突之非body祖先元素设置 overflow:hidden"></p><ul><li>以毒攻毒：同样可以使用 3D transform 变换</li><li>使劲提高 translateZ 的值（对于透视的情况，临界值并不好掌握-_-）</li></ul><h3 id="七、代码中的规范"><a href="#七、代码中的规范" class="headerlink" title="七、代码中的规范"></a>七、代码中的规范</h3><ol><li>非浮动元素：z-index “不犯2”准则<ul><li>即对于非浮动元素 z-index 值的设置一般不超过 2</li></ul></li><li>浮层元素：z-index “层级计数器”<ul><li>对于浮层元素设置层级时，获取z-index最大值 / z-index默认值(习惯设置为9)</li></ul></li></ol><blockquote><p>重新解释 DEMO1：<br>非IE浏览器中，父元素设置 position:fixed 生成了层叠上下文；<br>此层叠上下文的产生破坏了”同一层叠上下文“中比较层叠水平的基础，导致子元素所有的层级设置都受到父级层叠上下文的限制；<br>最终造成的错觉是子元素的所有层级设置都失效了~</p></blockquote><h3 id="八、参考文献"><a href="#八、参考文献" class="headerlink" title="八、参考文献"></a>八、参考文献</h3><ol><li><a href="https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/comment-page-1/#comment-386780" target="_blank" rel="noopener">深入理解CSS中的层叠上下文和层叠顺序</a></li><li><a href="https://www.cnblogs.com/reaf/p/5788781.html" target="_blank" rel="noopener">z-index和transform,你真的了解吗？</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一晃时间走了好远，又一年教师节了，在此祝所有老师教师节快乐！&lt;br&gt;言归正传，为何提笔写此文呢？前两天在项目中给某个节点A设置 fixed 定位后出现了一个神奇的现象：无论我怎么设置其子节点B的层级，B总是会被A之后出现的任意带有层级的元素节点遮挡。&lt;br&gt;我仿佛发现了新大陆一般惊奇，平日里对待熟悉的事物我总能做到恰到好处的蜻蜓点水，终于掉坑里了吧(囧)。于是乎，我决定今天要彻底弄懂层叠上下文（Stacking Context）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>2017 年终总结</title>
    <link href="http://yoursite.com/2018/01/18/first/"/>
    <id>http://yoursite.com/2018/01/18/first/</id>
    <published>2018-01-18T14:08:00.000Z</published>
    <updated>2018-12-21T05:18:04.048Z</updated>
    
    <content type="html"><![CDATA[<p>2018 就这样悄悄地的来了，是我忽略了太多的征兆吗，现在才感觉到它的气息，亏欠了 2017 的那个句点，是时候该画上了。<br>2017，特别又特别的一年。这一年的北京微露清纯，少了雾霾的困扰，呈现出更加优雅的姿态；这一年的我稍显庞杂，没了学校的庇护，流露出略微复杂的心情；这一年的北京异常寒冷，这一年的我尤为忙碌；奈何此去无雪，向来经年有“学”。没控制住，文艺病又犯病了，那通俗点吧，这一年也许成长的不太明显，但我知道这是必经的旅行。</p><a id="more"></a><h3 id="2017-回眸一笑"><a href="#2017-回眸一笑" class="headerlink" title="2017 回眸一笑"></a>2017 回眸一笑</h3><p>17 年，我的既定目标是：在项目中提升自身的能力，努力脱掉前端小白的称号，最好能够折腾出一些有趣的东西。接近尾声了，只能说还算顺利的完成了前半段的计划——在项目中提升自己，至于后半段路——有意义的东西还没见踪影，需要继续加油啦。</p><h4 id="17-年的工作情况："><a href="#17-年的工作情况：" class="headerlink" title="17 年的工作情况："></a>17 年的工作情况：</h4><ol><li><strong>web 端项目：</strong>年初参与了组内第一个使用 vue 开发的 web 端项目。当时的我只是纯粹的写写业务，对于接口文档、项目配置、路由跳转等并未做深入的研究。之后 web 端项目接触的也越来越少。</li><li><strong>H5 项目：</strong>3/4 的时间都在做 H5 应用，独立承担的 H5 应用大概有七个。<ul><li>初期：使用 vue1 进行研发。对于技术，慢慢的由不熟悉到熟悉，经过一两个项目的洗礼后开始独立承担项目。</li><li>后期：随着 vue2 发布并日趋成熟，开始尝试使用 vue2 进行开发，vue2 项目换用了组内开发的组件库，很遗憾自己没有参与到组件的研发过程中去 :(</li></ul></li><li><strong>其他：</strong>穿插着切图、网站研发等其他任务</li></ol><h4 id="17-年的学习成果："><a href="#17-年的学习成果：" class="headerlink" title="17 年的学习成果："></a>17 年的学习成果：</h4><p>这一年主要还是在开发过程中成长，遇到问题查阅文档，逛社区、论坛，或者同小伙伴交流，寻找思路。业余时间太少，总结做的还不到位，只能展示出项目中用到的技术了。</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:left">技术</th><th style="text-align:left">优劣分析</th><th style="text-align:center">掌握程度</th></tr></thead><tbody><tr><td style="text-align:center">切图</td><td style="text-align:left">Html5、Css3、JS、Jquery…</td><td style="text-align:left">Css3 掌握的稍微好一些</td><td style="text-align:center">★★★★★</td></tr><tr><td style="text-align:center">网站研发</td><td style="text-align:left">Html、Css、JS、Jquery、Freemarker、Java…</td><td style="text-align:left">Java 仅做了解</td><td style="text-align:center">★★★★☆</td></tr><tr><td style="text-align:center">vue1</td><td style="text-align:left">vue、vue-router、vue-resource、webpack、ES6…</td><td style="text-align:left">熟练掌握 vue1，掌握 webpack、ES6</td><td style="text-align:center">★★★★☆</td></tr><tr><td style="text-align:center">vue2</td><td style="text-align:left">vue、vuex、vue-router、webpack、ES6…</td><td style="text-align:left">熟练掌握 vue2，掌握 webpack、ES6</td><td style="text-align:center">★★★★☆</td></tr></tbody></table><h4 id="17-年的生活状态："><a href="#17-年的生活状态：" class="headerlink" title="17 年的生活状态："></a>17 年的生活状态：</h4><p>有一群志同道合的小伙伴，闲暇之余能聚在一起聊聊技术、谈谈理想，很开心、很珍惜。曾一度嚷嚷着要成立一个翻译小分队，专门翻译感觉不错的外文文献来着，最终搁浅了吧（囧），新的一年希望还能搭上我们的“翻译号”，真的扬帆<del>去流浪</del>哟！</p><p>有几个爱念叨却很仗义的闺蜜，有一个默默给与温暖与支持的伴侣，有一间面积很大的屋子（虽然是租的），感觉再养一只小萨摩生活就完美了。</p><blockquote><p>回首向来萧瑟处，归去，也无风雨也无晴。</p></blockquote><p>哈哈，苏轼乱入一下，确实很喜欢这种态度。马不停蹄的工作了一年，进步还是有的，但少了总结与深入学习的时间，收获跟预期还有些许差距，需要继续努力啦。</p><h3 id="2018-翘首以待"><a href="#2018-翘首以待" class="headerlink" title="2018 翘首以待"></a>2018 翘首以待</h3><p>首先想说，不管工作多忙，都要给自己预留时间做好总结，这是需要一定的技术支持和抗压能力的。能在拓宽广度的同时挖掘事物的深度，让一切变得通透明了，这样才能给自己更大的提升空间。<br>其次呢，更要学会抽离自己，超出工作本身去做一些令自己欣喜的事情。比如学习之余写写博文，比如让我们的“翻译号”再次扬帆，比如在 github 上做一些有趣的东西，比如静下心来练练书法……只有自己的眼光变得足够开阔了，才能装得下更美好的风景。</p><p>希望有一天我的脑袋能变得像“哆啦A梦”的万能口袋那样，什么新奇美好的东西都装得下，作一程序媛如此，我也就满意啦！</p><p><img src="http://cdn.zhiyuchangxin.cn/doraemon.png" alt="机器猫" title="哆啦A梦"></p><p>打个小广告，这是我养的一只<a href="https://github.com/zhiyuchangxin/doraemon" target="_blank" rel="noopener">哆啦A梦</a>哟，想见它吗，快点点看!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2018 就这样悄悄地的来了，是我忽略了太多的征兆吗，现在才感觉到它的气息，亏欠了 2017 的那个句点，是时候该画上了。&lt;br&gt;2017，特别又特别的一年。这一年的北京微露清纯，少了雾霾的困扰，呈现出更加优雅的姿态；这一年的我稍显庞杂，没了学校的庇护，流露出略微复杂的心情；这一年的北京异常寒冷，这一年的我尤为忙碌；奈何此去无雪，向来经年有“学”。没控制住，文艺病又犯病了，那通俗点吧，这一年也许成长的不太明显，但我知道这是必经的旅行。&lt;/p&gt;
    
    </summary>
    
    
      <category term="thinking" scheme="http://yoursite.com/tags/thinking/"/>
    
  </entry>
  
</feed>
